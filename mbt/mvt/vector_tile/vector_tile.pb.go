// Code generated by protoc-gen-go.
// source: vector_tile.proto
// DO NOT EDIT!

/*
Package vector_tile is a generated protocol buffer package.

It is generated from these files:
	vector_tile.proto

It has these top-level messages:
	Tile
*/
package vector_tile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GeomType is described in section 4.3.4 of the specification
type Tile_GeomType int32

const (
	Tile_UNKNOWN    Tile_GeomType = 0
	Tile_POINT      Tile_GeomType = 1
	Tile_LINESTRING Tile_GeomType = 2
	Tile_POLYGON    Tile_GeomType = 3
)

var Tile_GeomType_name = map[int32]string{
	0: "UNKNOWN",
	1: "POINT",
	2: "LINESTRING",
	3: "POLYGON",
}
var Tile_GeomType_value = map[string]int32{
	"UNKNOWN":    0,
	"POINT":      1,
	"LINESTRING": 2,
	"POLYGON":    3,
}

func (x Tile_GeomType) Enum() *Tile_GeomType {
	p := new(Tile_GeomType)
	*p = x
	return p
}
func (x Tile_GeomType) String() string {
	return proto.EnumName(Tile_GeomType_name, int32(x))
}
func (x *Tile_GeomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Tile_GeomType_value, data, "Tile_GeomType")
	if err != nil {
		return err
	}
	*x = Tile_GeomType(value)
	return nil
}
func (Tile_GeomType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Tile struct {
	Layers           []*Tile_Layer             `protobuf:"bytes,3,rep,name=layers" json:"layers,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Tile) Reset()                    { *m = Tile{} }
func (m *Tile) String() string            { return proto.CompactTextString(m) }
func (*Tile) ProtoMessage()               {}
func (*Tile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

var extRange_Tile = []proto.ExtensionRange{
	{16, 8191},
}

func (*Tile) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Tile
}
func (m *Tile) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *Tile) GetLayers() []*Tile_Layer {
	if m != nil {
		return m.Layers
	}
	return nil
}

// Variant type encoding
// The use of values is described in section 4.1 of the specification
type Tile_Value struct {
	// Exactly one of these values must be present in a valid message
	StringValue      *string                   `protobuf:"bytes,1,opt,name=string_value" json:"string_value,omitempty"`
	FloatValue       *float32                  `protobuf:"fixed32,2,opt,name=float_value" json:"float_value,omitempty"`
	DoubleValue      *float64                  `protobuf:"fixed64,3,opt,name=double_value" json:"double_value,omitempty"`
	IntValue         *int64                    `protobuf:"varint,4,opt,name=int_value" json:"int_value,omitempty"`
	UintValue        *uint64                   `protobuf:"varint,5,opt,name=uint_value" json:"uint_value,omitempty"`
	SintValue        *int64                    `protobuf:"zigzag64,6,opt,name=sint_value" json:"sint_value,omitempty"`
	BoolValue        *bool                     `protobuf:"varint,7,opt,name=bool_value" json:"bool_value,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Tile_Value) Reset()                    { *m = Tile_Value{} }
func (m *Tile_Value) String() string            { return proto.CompactTextString(m) }
func (*Tile_Value) ProtoMessage()               {}
func (*Tile_Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

var extRange_Tile_Value = []proto.ExtensionRange{
	{8, 536870911},
}

func (*Tile_Value) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Tile_Value
}
func (m *Tile_Value) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *Tile_Value) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Tile_Value) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *Tile_Value) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Tile_Value) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Tile_Value) GetUintValue() uint64 {
	if m != nil && m.UintValue != nil {
		return *m.UintValue
	}
	return 0
}

func (m *Tile_Value) GetSintValue() int64 {
	if m != nil && m.SintValue != nil {
		return *m.SintValue
	}
	return 0
}

func (m *Tile_Value) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

// Features are described in section 4.2 of the specification
type Tile_Feature struct {
	Id *uint64 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	// Tags of this feature are encoded as repeated pairs of
	// integers.
	// A detailed description of tags is located in sections
	// 4.2 and 4.4 of the specification
	Tags []uint32 `protobuf:"varint,2,rep,packed,name=tags" json:"tags,omitempty"`
	// The type of geometry stored in this feature.
	Type *Tile_GeomType `protobuf:"varint,3,opt,name=type,enum=vector_tile.Tile_GeomType,def=0" json:"type,omitempty"`
	// Contains a stream of commands and parameters (vertices).
	// A detailed description on geometry encoding is located in
	// section 4.3 of the specification.
	Geometry         []uint32 `protobuf:"varint,4,rep,packed,name=geometry" json:"geometry,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Tile_Feature) Reset()                    { *m = Tile_Feature{} }
func (m *Tile_Feature) String() string            { return proto.CompactTextString(m) }
func (*Tile_Feature) ProtoMessage()               {}
func (*Tile_Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

const Default_Tile_Feature_Id uint64 = 0
const Default_Tile_Feature_Type Tile_GeomType = Tile_UNKNOWN

func (m *Tile_Feature) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return Default_Tile_Feature_Id
}

func (m *Tile_Feature) GetTags() []uint32 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Tile_Feature) GetType() Tile_GeomType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Tile_Feature_Type
}

func (m *Tile_Feature) GetGeometry() []uint32 {
	if m != nil {
		return m.Geometry
	}
	return nil
}

// Layers are described in section 4.1 of the specification
type Tile_Layer struct {
	// Any compliant implementation must first read the version
	// number encoded in this message and choose the correct
	// implementation for this version number before proceeding to
	// decode other parts of this message.
	Version *uint32 `protobuf:"varint,15,req,name=version,def=1" json:"version,omitempty"`
	Name    *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The actual features in this tile.
	Features []*Tile_Feature `protobuf:"bytes,2,rep,name=features" json:"features,omitempty"`
	// Dictionary encoding for keys
	Keys []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
	// Dictionary encoding for values
	Values []*Tile_Value `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
	// The bounding box in this tile spans from 0..4095 units
	// Although this is an "optional" field it is required by the specification.
	// See https://github.com/mapbox/vector-tile-spec/issues/47
	Extent           *uint32                   `protobuf:"varint,5,opt,name=extent,def=4096" json:"extent,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Tile_Layer) Reset()                    { *m = Tile_Layer{} }
func (m *Tile_Layer) String() string            { return proto.CompactTextString(m) }
func (*Tile_Layer) ProtoMessage()               {}
func (*Tile_Layer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

var extRange_Tile_Layer = []proto.ExtensionRange{
	{16, 536870911},
}

func (*Tile_Layer) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Tile_Layer
}
func (m *Tile_Layer) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_Tile_Layer_Version uint32 = 1
const Default_Tile_Layer_Extent uint32 = 4096

func (m *Tile_Layer) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_Tile_Layer_Version
}

func (m *Tile_Layer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Tile_Layer) GetFeatures() []*Tile_Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *Tile_Layer) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Tile_Layer) GetValues() []*Tile_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Tile_Layer) GetExtent() uint32 {
	if m != nil && m.Extent != nil {
		return *m.Extent
	}
	return Default_Tile_Layer_Extent
}

func init() {
	proto.RegisterType((*Tile)(nil), "vector_tile.Tile")
	proto.RegisterType((*Tile_Value)(nil), "vector_tile.Tile.Value")
	proto.RegisterType((*Tile_Feature)(nil), "vector_tile.Tile.Feature")
	proto.RegisterType((*Tile_Layer)(nil), "vector_tile.Tile.Layer")
	proto.RegisterEnum("vector_tile.Tile_GeomType", Tile_GeomType_name, Tile_GeomType_value)
}

var fileDescriptor0 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x8e, 0x93, 0x40,
	0x14, 0xc6, 0x65, 0x18, 0x0a, 0x1c, 0x96, 0x95, 0x1d, 0x4d, 0xac, 0x5c, 0x35, 0x7b, 0x23, 0x59,
	0x93, 0x66, 0xb7, 0x31, 0x26, 0x72, 0xa3, 0xd9, 0x44, 0x6b, 0x63, 0x03, 0x1b, 0x45, 0x8d, 0x57,
	0x1b, 0xd6, 0x9d, 0x36, 0x44, 0xca, 0x34, 0x30, 0x34, 0x72, 0xe7, 0xab, 0xf8, 0x00, 0xbe, 0x83,
	0x8f, 0xe6, 0x19, 0xfe, 0xa4, 0x4d, 0x2a, 0x57, 0xf0, 0xe3, 0x9b, 0x39, 0xdf, 0xf7, 0x1d, 0x38,
	0xdb, 0xf1, 0xef, 0x52, 0x94, 0xb7, 0x32, 0xcb, 0xf9, 0x74, 0x5b, 0x0a, 0x29, 0x98, 0x73, 0x80,
	0xce, 0xff, 0x52, 0xa0, 0x09, 0xbe, 0xb0, 0x67, 0x30, 0xca, 0xd3, 0x86, 0x97, 0xd5, 0x58, 0x9f,
	0xe8, 0x81, 0x33, 0x7b, 0x32, 0x3d, 0x3c, 0xa9, 0x24, 0xd3, 0xa5, 0xfa, 0xef, 0xff, 0xd6, 0xc0,
	0xf8, 0x92, 0xe6, 0x35, 0x67, 0x8f, 0xe1, 0xa4, 0x92, 0x65, 0x56, 0xac, 0x6f, 0x77, 0xea, 0x7b,
	0xac, 0x4d, 0xb4, 0xc0, 0x66, 0x8f, 0xc0, 0x59, 0xe5, 0x22, 0x95, 0x3d, 0x24, 0x08, 0x89, 0x92,
	0xde, 0x8b, 0xfa, 0x2e, 0xe7, 0x3d, 0xd5, 0x91, 0x6a, 0xec, 0x0c, 0xec, 0xac, 0x18, 0x84, 0x14,
	0x91, 0xce, 0x18, 0x40, 0xbd, 0x67, 0x06, 0x32, 0xaa, 0x58, 0xb5, 0x67, 0x23, 0x64, 0x4c, 0xb1,
	0x3b, 0x21, 0xf2, 0x9e, 0x99, 0xc8, 0xac, 0x0b, 0xcb, 0xb2, 0xbc, 0x5f, 0xf8, 0x10, 0xbf, 0x02,
	0xf3, 0x1d, 0x4f, 0x65, 0x5d, 0x72, 0xe6, 0x02, 0xc9, 0xee, 0x5b, 0x6b, 0x34, 0xd4, 0x2e, 0x99,
	0x07, 0x54, 0xa6, 0xeb, 0x0a, 0x6d, 0xe9, 0x81, 0x7b, 0x4d, 0x3c, 0x8d, 0x5d, 0x21, 0x69, 0xb6,
	0x9d, 0xa5, 0xd3, 0x99, 0x7f, 0x1c, 0x7b, 0xce, 0xc5, 0x26, 0x41, 0x45, 0x68, 0x7e, 0x8e, 0x3e,
	0x44, 0xf1, 0xd7, 0x08, 0xd3, 0x58, 0x6b, 0x84, 0x5c, 0x96, 0x0d, 0xda, 0xee, 0x2f, 0xf2, 0xff,
	0x60, 0x31, 0x6d, 0x45, 0x68, 0xce, 0xdc, 0x61, 0x93, 0x99, 0x28, 0xc6, 0x0f, 0x27, 0x24, 0x70,
	0x43, 0xed, 0x8a, 0x9d, 0x00, 0x2d, 0xd2, 0x8d, 0x2a, 0x89, 0x60, 0x49, 0xcf, 0xc1, 0x5a, 0x75,
	0x06, 0x3b, 0x2b, 0xce, 0xec, 0xe9, 0xf1, 0xe0, 0x21, 0x02, 0x1e, 0xfd, 0xc1, 0x9b, 0x6e, 0x31,
	0xb6, 0x5a, 0x54, 0x1b, 0xba, 0x6a, 0x47, 0xff, 0x77, 0x51, 0xc3, 0x7a, 0x46, 0xfc, 0xa7, 0xe4,
	0x85, 0x6c, 0x6b, 0x74, 0x43, 0xfa, 0xe2, 0xf2, 0xd5, 0x4b, 0x2c, 0xc9, 0xeb, 0x4a, 0x3a, 0x7f,
	0x0d, 0xd6, 0x10, 0x8d, 0x39, 0x30, 0x84, 0xf3, 0x1e, 0x30, 0x1b, 0x8c, 0x9b, 0x78, 0x11, 0x25,
	0x58, 0xce, 0x29, 0xc0, 0x72, 0x11, 0xbd, 0xfd, 0x94, 0x7c, 0x5c, 0x44, 0x73, 0x8f, 0x28, 0xdd,
	0x4d, 0xbc, 0xfc, 0x36, 0x8f, 0x23, 0x4f, 0xbf, 0x30, 0xd4, 0x55, 0x6f, 0xae, 0xc9, 0x7b, 0xfd,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x6a, 0x6c, 0x30, 0x67, 0x02, 0x00, 0x00,
}
